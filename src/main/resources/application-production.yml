micronaut:
  application:
    name: cdsi
  executors:
    enclave-jni:
      type: scheduled
      core-pool-size: 4
  metrics:
    enabled: true
    export:
      statsd:
        enabled: true
        flavor: datadog
        step: PT1M
  server:
    port: 8080
    netty:
      compression-threshold: 1073741824
      compression-level: 0
      max-initial-line-length: 16384
      max-header-size: 32768
      max-chunk-size: 65536
      write-buffer-high-water-mark: 65536
      write-buffer-low-water-mark: 32768
  retry:
    attempts: 3
    delay: 1s
    multiplier: 2

endpoints:
  all:
    port: 8081
    sensitive: false
  health:
    details-visible: ANONYMOUS

# Rate Limiter Cosmos DB Configuration
cosmos:
  database: cdsiDatabase
  container: rateLimiterContainer
  endpoint: "https://${COSMOS_ACCOUNT_NAME}.documents.azure.com:443"
  key: ${COSMOS_KEY}
  preferredRegions: ["northeurope", "eastus"]
  consistencyLevel: Session
  connectionMode: DIRECT
  contentResponseOnWriteEnabled: true

# Redis Configuration
redis:
  uris: redis://localhost:6379
  uris: "${REDIS_HOST}:6380,password=${REDIS_KEY},ssl=True,abortConnect=False"
  timeout: 2000
  retryAttempts: 3
  retryDelay: 200

redis-leaky-bucket:
  urls:
    - "redis://${REDIS_HOST}:6380"
  circuit-breaker:
    attempts: 3
    delay: 500ms
    reset: 5s

# Azure Configuration
azure:
  cosmos:
    database: accountDatabase
    container: accountContainer
    endpoint: "https://${ACCOUNT_COSMOS_NAME}.documents.azure.com:443"
    key: ${ACCOUNT_COSMOS_KEY}
  eventHub:
    namespace: ${EVENT_HUB_NAMESPACE}
    name: ${EVENT_HUB_NAME}
    consumerGroup: "$Default"
    batchSize: 100
    maxWaitTimeInSeconds: 30
  retry:
    maxRetries: 3
    initialRetryInterval: PT0.1S
    maxRetryInterval: PT30S
    backoffCoefficient: 2.0
  circuitBreaker:
    cosmos:
      requestTimeout: PT5S
      failureThreshold: 5
      delay: PT1S
      successThreshold: 3
    eventHub:
      requestTimeout: PT10S
      failureThreshold: 3
      delay: PT2S
      successThreshold: 2

# Authentication Configuration
authentication:
  sharedSecret: ${AUTH_SECRET}
  tokenExpiration: 24h

# Enclave Configuration
enclave:
  enclaveId: ${ENCLAVE_ID}
  availableEpcMemory: 32000000
  loadFactor: 1.6
  shards: 4
  token-secret: ${TOKEN_SECRET}
  maxOutstandingRequests: 1000
  attestationRefreshInterval: 10m
  attestationInitialDelay: 0s

# Rate Limiting Configuration
leakyBucketLimit:
  bucketSize: 1000
  leakRateScalar: 50
  leakRateDuration: 1s

tokenRateLimit:
  bucketSize: 5000
  leakRateScalar: 100
  leakRateDuration: 1s